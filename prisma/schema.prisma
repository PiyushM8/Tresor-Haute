generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  role             Role      @default(USER)
  accounts         Account[]
  cart             Cart?
  reviews          Review[]
  sessions         Session[]
  orders           Order[]
  favorites        Product[] @relation("UserFavorites")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id           String         @id @default(cuid())
  name         String
  description  String
  price        Float
  categoryId   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  category     String
  images       String[]
  stock        Int            @default(0)
  cartItems    CartItem[]
  Category     Category?      @relation(fields: [categoryId], references: [id])
  ProductImage ProductImage[]
  reviews      Review[]
  orderItems   OrderItem[]
  favoritedBy  User[]         @relation("UserFavorites")
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id           String        @id @default(cuid())
  userId       String
  total        Float
  status       OrderStatus   @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isGuest      Boolean       @default(false)
  items        OrderItem[]
  user         User          @relation(fields: [userId], references: [id])
  shippingInfo ShippingInfo? @relation("OrderShippingInfo")
  paymentInfo  PaymentInfo?  @relation("OrderPaymentInfo")

  @@index([userId])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model ShippingInfo {
  id         String   @id @default(cuid())
  orderId    String   @unique
  firstName  String
  lastName   String
  email      String
  address    String
  city       String
  postalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation("OrderShippingInfo", fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipping_info")
}

model PaymentInfo {
  id         String   @id @default(cuid())
  orderId    String   @unique
  cardNumber String
  expiryDate String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation("OrderPaymentInfo", fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_info")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Career {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
